{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { tap } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = environment.apiUrl;\n    this.morParams = ['test1', 'test2'];\n  }\n  getTextFiles() {\n    return this.http.get(`/assets/text.txt`, {\n      responseType: 'text'\n    });\n  }\n  getUsers() {\n    //const theParams={['testList']:this.morParams};\n    //let myParams=new HttpParams({fromObject:{['testList']:this.morParams}});\n    let myParams = new HttpParams({\n      fromString: 'name=junior&id=58'\n    });\n    return this.http.get(`${this.apiUrl}/users`, {\n      params: myParams\n    });\n  }\n  getUser() {\n    return this.http.get(`${this.apiUrl}/users/1`).pipe(tap({}));\n  }\n  createUser(user) {\n    return this.http.post(`${this.apiUrl}/users`, user);\n  }\n  updateUser(user) {\n    return this.http.put(`${this.apiUrl}/users/${user.id}`, user);\n  }\n  patchUser(user) {\n    return this.http.put(`${this.apiUrl}/users/${user.id}`, user);\n  }\n  deleteUser(id) {\n    return this.http.delete(`${this.apiUrl}/users/${id}`);\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAqBA,UAAU,QAAS,sBAAsB;AAC9D,SAAqBC,GAAG,QAAQ,MAAM;AAEtC,SAASC,WAAW,QAAQ,8BAA8B;;;AAI1D,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,IAAe;IAAf,SAAI,GAAJA,IAAI;IAHhB,WAAM,GAACH,WAAW,CAACI,MAAM;IACxB,cAAS,GAAC,CAAC,OAAO,EAAC,OAAO,CAAC;EAEG;EAEvCC,YAAY;IACV,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAC,kBAAkB,EAAC;MAACC,YAAY,EAAC;IAAM,CAAC,CAAC;EAChE;EACAC,QAAQ;IAEN;IAEA;IAEA,IAAIC,QAAQ,GAAC,IAAIX,UAAU,CAAC;MAACY,UAAU,EAAC;IAAmB,CAAC,CAAC;IAC7D,OAAO,IAAI,CAACP,IAAI,CAACG,GAAG,CAAS,GAAG,IAAI,CAACF,MAAM,QAAQ,EAAC;MAACO,MAAM,EAACF;IAAQ,CAAC,CAAC;EACxE;EACAG,OAAO;IACL,OAAO,IAAI,CAACT,IAAI,CAACG,GAAG,CAAO,GAAG,IAAI,CAACF,MAAM,UAAU,CAAC,CACnDS,IAAI,CACHd,GAAG,CAAC,EAAE,CAAC,CACR;EACH;EACAe,UAAU,CAACC,IAAS;IAClB,OAAO,IAAI,CAACZ,IAAI,CAACa,IAAI,CAAO,GAAG,IAAI,CAACZ,MAAM,QAAQ,EAACW,IAAI,CAAC;EAC1D;EACAE,UAAU,CAACF,IAAS;IAClB,OAAO,IAAI,CAACZ,IAAI,CAACe,GAAG,CAAO,GAAG,IAAI,CAACd,MAAM,UAAUW,IAAI,CAACI,EAAE,EAAE,EAACJ,IAAI,CAAC;EACpE;EACAK,SAAS,CAACL,IAAS;IACjB,OAAO,IAAI,CAACZ,IAAI,CAACe,GAAG,CAAO,GAAG,IAAI,CAACd,MAAM,UAAUW,IAAI,CAACI,EAAE,EAAE,EAACJ,IAAI,CAAC;EACpE;EACAM,UAAU,CAACF,EAAS;IAClB,OAAO,IAAI,CAAChB,IAAI,CAACmB,MAAM,CAAU,GAAG,IAAI,CAAClB,MAAM,UAAUe,EAAE,EAAE,CAAC;EAChE;;AAnCWlB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAsB,SAAXtB,WAAW;EAAAuB,YAFV;AAAM","names":["HttpParams","tap","environment","UserService","constructor","http","apiUrl","getTextFiles","get","responseType","getUsers","myParams","fromString","params","getUser","pipe","createUser","user","post","updateUser","put","id","patchUser","deleteUser","delete","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\hikmatdell\\source\\repos\\angularhttp\\src\\app\\service\\user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams  } from '@angular/common/http';\nimport { Observable, tap } from 'rxjs';\nimport { User } from '../interface/user';\nimport { environment } from 'src/environments/environment';\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  private apiUrl=environment.apiUrl;\n  readonly morParams=['test1','test2'];\n\n  constructor(private http:HttpClient) { }\n\n  getTextFiles():Observable<string>{\n    return this.http.get(`/assets/text.txt`,{responseType:'text'});\n  }\n  getUsers():Observable<User[]>{\n   \n    //const theParams={['testList']:this.morParams};\n\n    //let myParams=new HttpParams({fromObject:{['testList']:this.morParams}});\n    \n    let myParams=new HttpParams({fromString:'name=junior&id=58'});\n    return this.http.get<User[]>(`${this.apiUrl}/users`,{params:myParams});\n  }\n  getUser():Observable<User>{\n    return this.http.get<User>(`${this.apiUrl}/users/1`)\n    .pipe(\n      tap({})\n    )\n  }\n  createUser(user:User):Observable<User>{\n    return this.http.post<User>(`${this.apiUrl}/users`,user);\n  }\n  updateUser(user:User):Observable<User>{\n    return this.http.put<User>(`${this.apiUrl}/users/${user.id}`,user)\n  } \n  patchUser(user:User):Observable<User>{\n    return this.http.put<User>(`${this.apiUrl}/users/${user.id}`,user)\n  } \n  deleteUser(id:number):Observable<unknown>{\n    return this.http.delete<unknown>(`${this.apiUrl}/users/${id}`)\n  } \n  \n  //https://www.getarrays.io/courses\n  //https://www.getarrays.io/courses/1319309/lectures/30790894\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}