{"ast":null,"code":"import { Observable, map } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = environment.apiUrl;\n    this.morParams = ['test1', 'test2'];\n  }\n  getTextFiles() {\n    return this.http.get(`/assets/text.txt`, {\n      responseType: 'text'\n    });\n  }\n  getUsers() {\n    //const theParams={['testList']:this.morParams};\n    //let myParams=new HttpParams({fromObject:{['testList']:this.morParams}});\n    // let myParams=new HttpParams({fromString:'name=junior&id=58'});,{params:myParams}\n    return this.http.get(`${this.apiUrl}/users`).pipe( /* tap(users=>console.log(users)) */\n    map(users => users.map(user => {}, ...user, name, user.firstName.up)));\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});\ngetUser();\nObservable < User > {\n  return: this.http.get(`${this.apiUrl}/users/1`)\n};\ncreateUser(user, User);\nObservable < User > {\n  return: this.http.post(`${this.apiUrl}/users`, user)\n};\nupdateUser(user, User);\nObservable < User > {\n  return: this.http.put(`${this.apiUrl}/users/${user.id}`, user)\n};\npatchUser(user, User);\nObservable < User > {\n  return: this.http.put(`${this.apiUrl}/users/${user.id}`, user)\n};\ndeleteUser(id, number);\nObservable < unknown > {\n  return: this.http.delete(`${this.apiUrl}/users/${id}`)\n};","map":{"version":3,"mappings":"AAEA,SAASA,UAAU,EAAOC,GAAG,QAAQ,MAAM;AAE3C,SAASC,WAAW,QAAQ,8BAA8B;;;AAI1D,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,IAAe;IAAf,SAAI,GAAJA,IAAI;IAHhB,WAAM,GAACH,WAAW,CAACI,MAAM;IACxB,cAAS,GAAC,CAAC,OAAO,EAAC,OAAO,CAAC;EAEG;EAEvCC,YAAY;IACV,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAC,kBAAkB,EAAC;MAACC,YAAY,EAAC;IAAM,CAAC,CAAC;EAChE;EACAC,QAAQ;IAEN;IAEA;IAED;IACC,OAAO,IAAI,CAACL,IAAI,CAACG,GAAG,CAAS,GAAG,IAAI,CAACF,MAAM,QAAQ,CAAC,CACnDK,IAAI,EACH;IACAV,GAAG,CAACW,KAAK,IAAEA,KAAK,CAACX,GAAG,CAACY,IAAI,IAAE,CACzB,CAAC,EAAD,GAAGA,IAAI,EACPC,IAAI,EAAED,IAAI,CAACE,SAAS,CAACC,EAAE;EACzB;;AAtBOb,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAc,SAAXd,WAAW;EAAAe,YAFV;AAAM;AA2BlBC,OAAO,EAAE;AAACnB,UAAU,GAACoB,IAAI,GAAC;EACxBC,MAAM,EAAC,IAAI,CAAChB,IAAI,CAACG,GAAG,CAAO,GAAG,IAAI,CAACF,MAAM,UAAU;CAEpD;AACDgB,UAAU,CAACT,IAAI,EAACO,IAAI,CAAC;AAACpB,UAAU,GAACoB,IAAI,GAAC;EACpCC,MAAM,EAAC,IAAI,CAAChB,IAAI,CAACkB,IAAI,CAAO,GAAG,IAAI,CAACjB,MAAM,QAAQ,EAACO,IAAI;CACxD;AACDW,UAAU,CAACX,IAAI,EAACO,IAAI,CAAC;AAACpB,UAAU,GAACoB,IAAI,GAAC;EACpCC,MAAM,EAAC,IAAI,CAAChB,IAAI,CAACoB,GAAG,CAAO,GAAG,IAAI,CAACnB,MAAM,UAAUO,IAAI,CAACa,EAAE,EAAE,EAACb,IAAI;CAClE;AACDc,SAAS,CAACd,IAAI,EAACO,IAAI,CAAC;AAACpB,UAAU,GAACoB,IAAI,GAAC;EACnCC,MAAM,EAAC,IAAI,CAAChB,IAAI,CAACoB,GAAG,CAAO,GAAG,IAAI,CAACnB,MAAM,UAAUO,IAAI,CAACa,EAAE,EAAE,EAACb,IAAI;CAClE;AACDe,UAAU,CAACF,EAAE,EAACG,MAAM,CAAC;AAAC7B,UAAU,GAAC8B,OAAO,GAAC;EACvCT,MAAM,EAAC,IAAI,CAAChB,IAAI,CAAC0B,MAAM,CAAU,GAAG,IAAI,CAACzB,MAAM,UAAUoB,EAAE,EAAE;CAC9D","names":["Observable","map","environment","UserService","constructor","http","apiUrl","getTextFiles","get","responseType","getUsers","pipe","users","user","name","firstName","up","factory","providedIn","getUser","User","return","createUser","post","updateUser","put","id","patchUser","deleteUser","number","unknown","delete"],"sourceRoot":"","sources":["C:\\Users\\hikmatdell\\source\\repos\\angularhttp\\src\\app\\service\\user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams  } from '@angular/common/http';\nimport { Observable, tap ,map } from 'rxjs';\nimport { User } from '../interface/user';\nimport { environment } from 'src/environments/environment';\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  private apiUrl=environment.apiUrl;\n  readonly morParams=['test1','test2'];\n\n  constructor(private http:HttpClient) { }\n\n  getTextFiles():Observable<string>{\n    return this.http.get(`/assets/text.txt`,{responseType:'text'});\n  }\n  getUsers():Observable<User[]>{\n   \n    //const theParams={['testList']:this.morParams};\n\n    //let myParams=new HttpParams({fromObject:{['testList']:this.morParams}});\n    \n   // let myParams=new HttpParams({fromString:'name=junior&id=58'});,{params:myParams}\n    return this.http.get<User[]>(`${this.apiUrl}/users`)\n    .pipe(\n      /* tap(users=>console.log(users)) */\n      map(users=>users.map(user=>{\n        ...user,\n        name: user.firstName.up\n      }))\n    );\n  }\n  getUser():Observable<User>{\n    return this.http.get<User>(`${this.apiUrl}/users/1`);\n    \n  }\n  createUser(user:User):Observable<User>{\n    return this.http.post<User>(`${this.apiUrl}/users`,user);\n  }\n  updateUser(user:User):Observable<User>{\n    return this.http.put<User>(`${this.apiUrl}/users/${user.id}`,user)\n  } \n  patchUser(user:User):Observable<User>{\n    return this.http.put<User>(`${this.apiUrl}/users/${user.id}`,user)\n  } \n  deleteUser(id:number):Observable<unknown>{\n    return this.http.delete<unknown>(`${this.apiUrl}/users/${id}`)\n  } \n  \n  //https://www.getarrays.io/courses\n  //https://www.getarrays.io/courses/1319309/lectures/30790894\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}