{"ast":null,"code":"import { map } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = environment.apiUrl;\n    this.morParams = ['test1', 'test2'];\n  }\n  getTextFiles() {\n    return this.http.get(`/assets/text.txt`, {\n      responseType: 'text'\n    });\n  }\n  getUsers() {\n    //const theParams={['testList']:this.morParams};\n    //let myParams=new HttpParams({fromObject:{['testList']:this.morParams}});\n    // let myParams=new HttpParams({fromString:'name=junior&id=58'});,{params:myParams}\n    return this.http.get(`${this.apiUrl}/users`).pipe(map(users => users.map(user => ({\n      ...user,\n      name: user.name.toUpperCase(),\n      isAdmin: user.id == 10 ? true : false\n    }))));\n  }\n  getUser() {\n    return this.http.get(`${this.apiUrl}/users/1`);\n  }\n  createUser(user) {\n    return this.http.post(`${this.apiUrl}/users`, user);\n  }\n  updateUser(user) {\n    return this.http.put(`${this.apiUrl}/users/${user.id}`, user);\n  }\n  patchUser(user) {\n    return this.http.put(`${this.apiUrl}/users/${user.id}`, user);\n  }\n  deleteUser(id) {\n    return this.http.delete(`${this.apiUrl}/users/${id}`);\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAA0BA,GAAG,QAAQ,MAAM;AAE3C,SAASC,WAAW,QAAQ,8BAA8B;;;AAI1D,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAHhB,WAAM,GAAGH,WAAW,CAACI,MAAM;IAC1B,cAAS,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC;EAEA;EAEvCC,YAAY;IACV,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAC,kBAAkB,EAAE;MAAEC,YAAY,EAAE;IAAM,CAAE,CAAC;EACpE;EACAC,QAAQ;IACN;IAEA;IAEA;IACA,OAAO,IAAI,CAACL,IAAI,CAACG,GAAG,CAAS,GAAG,IAAI,CAACF,MAAM,QAAQ,CAAC,CAACK,IAAI,CACvDV,GAAG,CAAEW,KAAK,IACRA,KAAK,CAACX,GAAG,CAAEY,IAAI,KAAM;MACnB,GAAGA,IAAI;MACPC,IAAI,EAAED,IAAI,CAACC,IAAI,CAACC,WAAW,EAAE;MAC7BC,OAAO,EAACH,IAAI,CAACI,EAAE,IAAE,EAAE,GAAE,IAAI,GAAE;KAC5B,CAAC,CAAC,CACJ,CACF;EACH;EAEAC,OAAO;IACL,OAAO,IAAI,CAACb,IAAI,CAACG,GAAG,CAAO,GAAG,IAAI,CAACF,MAAM,UAAU,CAAC;EACtD;EACAa,UAAU,CAACN,IAAU;IACnB,OAAO,IAAI,CAACR,IAAI,CAACe,IAAI,CAAO,GAAG,IAAI,CAACd,MAAM,QAAQ,EAAEO,IAAI,CAAC;EAC3D;EACAQ,UAAU,CAACR,IAAU;IACnB,OAAO,IAAI,CAACR,IAAI,CAACiB,GAAG,CAAO,GAAG,IAAI,CAAChB,MAAM,UAAUO,IAAI,CAACI,EAAE,EAAE,EAAEJ,IAAI,CAAC;EACrE;EACAU,SAAS,CAACV,IAAU;IAClB,OAAO,IAAI,CAACR,IAAI,CAACiB,GAAG,CAAO,GAAG,IAAI,CAAChB,MAAM,UAAUO,IAAI,CAACI,EAAE,EAAE,EAAEJ,IAAI,CAAC;EACrE;EACAW,UAAU,CAACP,EAAU;IACnB,OAAO,IAAI,CAACZ,IAAI,CAACoB,MAAM,CAAU,GAAG,IAAI,CAACnB,MAAM,UAAUW,EAAE,EAAE,CAAC;EAChE;;AAxCWd,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAuB,SAAXvB,WAAW;EAAAwB,YAFV;AAAM","names":["map","environment","UserService","constructor","http","apiUrl","getTextFiles","get","responseType","getUsers","pipe","users","user","name","toUpperCase","isAdmin","id","getUser","createUser","post","updateUser","put","patchUser","deleteUser","delete","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\hikmatdell\\source\\repos\\angularhttp\\src\\app\\service\\user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { Observable, tap, map } from 'rxjs';\nimport { User } from '../interface/user';\nimport { environment } from 'src/environments/environment';\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserService {\n  private apiUrl = environment.apiUrl;\n  readonly morParams = ['test1', 'test2'];\n\n  constructor(private http: HttpClient) {}\n\n  getTextFiles(): Observable<string> {\n    return this.http.get(`/assets/text.txt`, { responseType: 'text' });\n  }\n  getUsers(): Observable<User[]> {\n    //const theParams={['testList']:this.morParams};\n\n    //let myParams=new HttpParams({fromObject:{['testList']:this.morParams}});\n\n    // let myParams=new HttpParams({fromString:'name=junior&id=58'});,{params:myParams}\n    return this.http.get<User[]>(`${this.apiUrl}/users`).pipe(\n      map((users) =>\n        users.map((user) => ({\n          ...user,\n          name: user.name.toUpperCase(),\n          isAdmin:user.id==10? true :false\n        }))\n      )\n    );\n  }\n\n  getUser(): Observable<User> {\n    return this.http.get<User>(`${this.apiUrl}/users/1`);\n  }\n  createUser(user: User): Observable<User> {\n    return this.http.post<User>(`${this.apiUrl}/users`, user);\n  }\n  updateUser(user: User): Observable<User> {\n    return this.http.put<User>(`${this.apiUrl}/users/${user.id}`, user);\n  }\n  patchUser(user: User): Observable<User> {\n    return this.http.put<User>(`${this.apiUrl}/users/${user.id}`, user);\n  }\n  deleteUser(id: number): Observable<unknown> {\n    return this.http.delete<unknown>(`${this.apiUrl}/users/${id}`);\n  }\n\n  //https://www.getarrays.io/courses\n  //https://www.getarrays.io/courses/1319309/lectures/30790894\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}